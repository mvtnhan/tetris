{"version":3,"sources":["image/bg.png","serviceWorker.js","constant.js","game-helpers.js","hooks/useGameStatus.js","tetrominos.js","hooks/useScreen.js","components/Button.js","components/Display.js","components/Cell.js","components/MainScreen.js","components/Tetris.js","hooks/usePlayer.js","hooks/useInterval.js","App.js","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","keyCode","MainScreen","createMainScreen","Array","from","fill","checkCollision","player","screen","moveX","x","moveY","y","tetromino","length","position","linePoints","TETROMINOS","0","shape","color","I","J","L","O","S","T","Z","randomTetromino","randTetromino","Math","floor","random","useScreen","resetPlayer","useState","setScreen","rowsCleared","setRowsCleared","useEffect","updateScreen","prevScreen","newScreen","map","row","cell","forEach","value","collided","reduce","ack","findIndex","prev","unshift","push","sweepRows","Button","onclick","children","StyledStartButton","onClick","styled","button","Display","gameOver","text","StyledDisplay","div","props","React","memo","type","StyledCell","StyledMainScreen","width","height","key","className","Tetris","dropTime","setDropTime","setGameOver","setPlayer","rotate","matrix","direction","rotatedTetro","_","index","col","reverse","useCallback","clonedPlayer","JSON","parse","stringify","offset","usePlayer","updatePlayerPosition","playerRotate","score","setScore","rows","setRows","level","setLevel","calcScore","useGameStatus","movePlayer","drop","move","e","callback","delay","ref","useRef","current","id","setInterval","clearInterval","useInterval","StyledTetris","role","tabIndex","onKeyDown","App","StyledApp","bgImage","GlobalStyle","createGlobalStyle","normalize","ReactDOM","render","Fragment","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8275d7d7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/bg.2810fe6b.png\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export const keyCode = {\r\n  LEFT: 37,\r\n  UP: 38,\r\n  RIGHT: 39,\r\n  DOWN: 40,\r\n};\r\n\r\nexport const MainScreen = {\r\n  WIDTH: 12,\r\n  HEIGHT: 20,\r\n};\r\n","import { MainScreen } from \"./constant\";\r\n\r\nexport const createMainScreen = () =>\r\n  Array.from(Array(MainScreen.HEIGHT), () =>\r\n    new Array(MainScreen.WIDTH).fill([0, \"clear\"])\r\n  );\r\n\r\nexport const checkCollision = (player, screen, { x: moveX, y: moveY }) => {\r\n  for (let y = 0; y < player.tetromino.length; y += 1) {\r\n    for (let x = 0; x < player.tetromino[y].length; x += 1) {\r\n      //1. Check that we're on an actual Tetromino cell\r\n      if (player.tetromino[y][x] !== 0) {\r\n        if (\r\n          //2. Check that our move is inside the game areas height (y)\r\n          //We should't go through the bottom of the play area\r\n          !screen[y + player.position.y + moveY] ||\r\n          //3. Check that our move is inside the game areas width (x)\r\n          !screen[y + player.position.y + moveY][\r\n            x + player.position.x + moveX\r\n          ] ||\r\n          //4. Check that the cell we're moving to isn't set to clear\r\n          screen[y + player.position.y + moveY][\r\n            x + player.position.x + moveX\r\n          ][1] !== \"clear\"\r\n        ) {\r\n          return true;\r\n        }\r\n      }\r\n    }\r\n  }\r\n};\r\n","import { useState, useEffect, useCallback } from \"react\";\r\n\r\nconst linePoints = [40, 100, 300, 1200];\r\n\r\nexport const useGameStatus = (rowsCleared) => {\r\n  const [score, setScore] = useState(0);\r\n  const [rows, setRows] = useState(0);\r\n  const [level, setLevel] = useState(0);\r\n\r\n  const calcScore = useCallback(() => {\r\n    //we have score\r\n    if (rowsCleared > 0) {\r\n      //this is how original Tetris score is calculated\r\n      setScore((prev) => prev + linePoints[rowsCleared - 1] * (level + 1));\r\n      setRows((prev) => prev + rowsCleared);\r\n    }\r\n  }, [level, rowsCleared]);\r\n\r\n  useEffect(() => {\r\n    calcScore();\r\n  }, [calcScore, rowsCleared, score]);\r\n\r\n  return [score, setScore, rows, setRows, level, setLevel];\r\n};\r\n","export const TETROMINOS = {\r\n  0: { shape: [[0]], color: \"0,0,0\" },\r\n  I: {\r\n    shape: [\r\n      [0, \"I\", 0, 0],\r\n      [0, \"I\", 0, 0],\r\n      [0, \"I\", 0, 0],\r\n      [0, \"I\", 0, 0],\r\n    ],\r\n    color: \"80,227,230\",\r\n  },\r\n  J: {\r\n    shape: [\r\n      [0, \"J\", 0],\r\n      [0, \"J\", 0],\r\n      [\"J\", \"J\", 0],\r\n    ],\r\n    color: \"65,40,234\",\r\n  },\r\n  L: {\r\n    shape: [\r\n      [0, \"L\", 0],\r\n      [0, \"L\", 0],\r\n      [0, \"L\", \"L\"],\r\n    ],\r\n    color: \"228,152,36\",\r\n  },\r\n  O: {\r\n    shape: [\r\n      [\"O\", \"O\"],\r\n      [\"O\", \"O\"],\r\n    ],\r\n    color: \"255,222,36\",\r\n  },\r\n  S: {\r\n    shape: [\r\n      [0, \"S\", \"S\"],\r\n      [\"S\", \"S\", 0],\r\n      [0, 0, 0],\r\n    ],\r\n    color: \"48,211,56\",\r\n  },\r\n  T: {\r\n    shape: [\r\n      [\"T\", \"T\", \"T\"],\r\n      [0, \"T\", 0],\r\n      [0, 0, 0],\r\n    ],\r\n    color: \"132,61,198\",\r\n  },\r\n  Z: {\r\n    shape: [\r\n      [\"Z\", \"Z\", 0],\r\n      [0, \"Z\", \"Z\"],\r\n      [0, 0, 0],\r\n    ],\r\n    color: \"227,78,78\",\r\n  },\r\n};\r\n\r\nexport const randomTetromino = () => {\r\n  const tetrominos = \"IJLOSTZ\";\r\n  const randTetromino =\r\n    tetrominos[Math.floor(Math.random() * tetrominos.length)];\r\n  return TETROMINOS[randTetromino];\r\n};\r\n","import { useState, useEffect } from \"react\";\r\n\r\nimport { createMainScreen } from \"../game-helpers\";\r\n\r\nexport const useScreen = (player, resetPlayer) => {\r\n  const [screen, setScreen] = useState(createMainScreen());\r\n  const [rowsCleared, setRowsCleared] = useState(0);\r\n\r\n  useEffect(() => {\r\n    setRowsCleared(0);\r\n\r\n    const sweepRows = (newScreen) =>\r\n      newScreen.reduce((ack, row) => {\r\n        if (row.findIndex((cell) => cell[0] === 0) === -1) {\r\n          setRowsCleared((prev) => prev + 1);\r\n          ack.unshift(new Array(newScreen[0].length).fill([0, \"clear\"]));\r\n          return ack;\r\n        }\r\n\r\n        ack.push(row);\r\n        return ack;\r\n      }, []);\r\n\r\n    const updateScreen = (prevScreen) => {\r\n      // First flush the screen\r\n      const newScreen = prevScreen.map((row) =>\r\n        row.map((cell) => (cell[1] === \"clear\" ? [0, \"clear\"] : cell))\r\n      );\r\n\r\n      // Then draw the tetromino\r\n      player.tetromino.forEach((row, y) => {\r\n        row.forEach((value, x) => {\r\n          if (value !== 0) {\r\n            newScreen[y + player.position.y][x + player.position.x] = [\r\n              value,\r\n              `${player.collided ? \"merged\" : \"clear\"}`,\r\n            ];\r\n          }\r\n        });\r\n      });\r\n\r\n      // Then check if we collided\r\n      if (player.collided) {\r\n        resetPlayer();\r\n        return sweepRows(newScreen);\r\n      }\r\n\r\n      return newScreen;\r\n    };\r\n\r\n    setScreen((prev) => updateScreen(prev));\r\n  }, [player, resetPlayer]);\r\n\r\n  return [screen, setScreen, rowsCleared];\r\n};\r\n","import PropTypes from \"prop-types\";\r\nimport React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Button = ({ onclick, children }) => (\r\n  <StyledStartButton onClick={onclick}>{children}</StyledStartButton>\r\n);\r\nexport default Button;\r\n\r\nButton.propTypes = {\r\n  onclick: PropTypes.func.isRequired,\r\n  children: PropTypes.string.isRequired,\r\n};\r\n\r\nconst StyledStartButton = styled.button`\r\n  box-sizing: border-box;\r\n  margin: 0 0 20px 0;\r\n  padding: 20px;\r\n  min-height: 30px;\r\n  width: 100%;\r\n  border-radius: 20px;\r\n  border: none;\r\n  color: white;\r\n  background: #333;\r\n  font-size: 2rem;\r\n  outline: none;\r\n  cursor: pointer;\r\n`;\r\n","import PropTypes from \"prop-types\";\r\nimport React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Display = ({ gameOver, text }) => (\r\n  <StyledDisplay gameOver={gameOver}>{text}</StyledDisplay>\r\n);\r\nexport default Display;\r\n\r\nDisplay.propTypes = {\r\n  gameOver: PropTypes.bool,\r\n  text: PropTypes.string.isRequired,\r\n};\r\n\r\nconst StyledDisplay = styled.div`\r\n  text-align: center;\r\n  box-sizing: border-box;\r\n  display: flex;\r\n  align-items: center;\r\n  margin: 0 0 20px 0;\r\n  padding: 20px;\r\n  border: 4px solid #333;\r\n  min-height: 30px;\r\n  width: 100%;\r\n  border-radius: 20px;\r\n  color: ${(props) => (props.gameOver ? \"red\" : \"#999\")};\r\n  background: #000;\r\n  font-size: 1.6rem;\r\n`;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nimport { TETROMINOS } from \"../tetrominos\";\r\n\r\nconst Cell = ({ type }) => (\r\n  <StyledCell type={type} color={TETROMINOS[type].color}></StyledCell>\r\n);\r\nexport default React.memo(Cell);\r\n\r\nconst StyledCell = styled.div`\r\n  width: auto;\r\n  background: rgba(${(props) => props.color}, 0.8);\r\n  border: ${(props) => (props.type === 0 ? \"0px solid\" : \"4px solid\")};\r\n  border-bottom-color: rgba(${(props) => props.color}, 0.1);\r\n  border-right-color: rgba(${(props) => props.color}, 1);\r\n  border-top-color: rgba(${(props) => props.color}, 1);\r\n  border-left-color: rgba(${(props) => props.color}, 0.3);\r\n`;\r\n","import PropTypes from \"prop-types\";\r\nimport React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nimport Cell from \"./Cell\";\r\nimport Display from \"./Display\";\r\n\r\nconst MainScreen = ({ screen, gameOver }) => (\r\n  <StyledMainScreen\r\n    width={screen[0].length}\r\n    height={screen.length}\r\n    gameOver={gameOver}\r\n  >\r\n    {screen.map((row) => row.map((cell, x) => <Cell key={x} type={cell[0]} />))}\r\n\r\n    {gameOver ? (\r\n      <div className=\"GameOver\">\r\n        <Display gameOver={gameOver} text=\"Game Over\" />\r\n      </div>\r\n    ) : null}\r\n  </StyledMainScreen>\r\n);\r\nexport default MainScreen;\r\n\r\nMainScreen.propTypes = {\r\n  screen: PropTypes.array.isRequired,\r\n};\r\n\r\nconst StyledMainScreen = styled.div`\r\n  position: relative;\r\n  display: grid;\r\n  grid-template-rows: repeat(\r\n    ${(props) => props.height},\r\n    calc(25vw / ${(props) => props.width})\r\n  );\r\n\r\n  grid-template-columns: repeat(${(props) => props.width}, 1fr);\r\n  grid-gap: 1px;\r\n  border: 2px solid #333;\r\n  max-width: 25vw;\r\n  width: 100%;\r\n  background: #111;\r\n  opacity: ${(props) => (props.gameOver ? 0.6 : 1)};\r\n\r\n  .GameOver {\r\n    position: absolute;\r\n    top: 50%;\r\n    left: 50%;\r\n    transform: translate(-50%, -50%);\r\n  }\r\n`;\r\n","import React, { useCallback, useState } from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nimport { checkCollision, createMainScreen } from \"../game-helpers\";\r\nimport { keyCode } from \"../constant\";\r\nimport { useGameStatus } from \"../hooks/useGameStatus\";\r\n\r\n// Custom Hooks\r\nimport { useInterval } from \"../hooks/useInterval\";\r\nimport { usePlayer } from \"../hooks/usePlayer\";\r\nimport { useScreen } from \"../hooks/useScreen\";\r\nimport StartButton from \"./Button\";\r\nimport Display from \"./Display\";\r\n\r\n// Components\r\nimport MainScreen from \"./MainScreen\";\r\n\r\nconst Tetris = () => {\r\n  const [dropTime, setDropTime] = useState(null);\r\n  const [gameOver, setGameOver] = useState(false);\r\n\r\n  const [player, updatePlayerPosition, resetPlayer, playerRotate] = usePlayer();\r\n  const [screen, setScreen, rowsCleared] = useScreen(player, resetPlayer);\r\n  const [score, setScore, rows, setRows, level, setLevel] = useGameStatus(\r\n    rowsCleared\r\n  );\r\n\r\n  const movePlayer = useCallback(\r\n    (direction) => {\r\n      if (!checkCollision(player, screen, { x: direction, y: 0 })) {\r\n        updatePlayerPosition({ x: direction, y: 0 });\r\n      }\r\n    },\r\n    [player, screen, updatePlayerPosition]\r\n  );\r\n\r\n  const startGame = () => {\r\n    // Reset everything\r\n    setScreen(createMainScreen());\r\n    setDropTime(1000);\r\n    resetPlayer();\r\n    setGameOver(false);\r\n    setScore(0);\r\n    setRows(0);\r\n    setLevel(0);\r\n  };\r\n\r\n  const drop = useCallback(() => {\r\n    //Increase level when player has cleared 10 rows\r\n    if (rows > (level + 1) * 10) {\r\n      setLevel((prev) => prev + 1);\r\n      //also increase speed\r\n      setDropTime(1000 / (level + 1) + 50);\r\n    }\r\n\r\n    if (!checkCollision(player, screen, { x: 0, y: 1 })) {\r\n      updatePlayerPosition({ x: 0, y: 1, collided: false });\r\n    } else {\r\n      // Game Over\r\n      if (player.position.y < 1) {\r\n        setGameOver(true);\r\n        setDropTime(null);\r\n      }\r\n      updatePlayerPosition({ x: 0, y: 0, collided: true });\r\n    }\r\n  }, [level, setLevel, rows, screen, player, updatePlayerPosition]);\r\n\r\n  const move = useCallback(\r\n    (e) => {\r\n      if (!gameOver) {\r\n        if (e.keyCode === keyCode.LEFT) {\r\n          movePlayer(-1);\r\n        } else if (e.keyCode === keyCode.RIGHT) {\r\n          movePlayer(1);\r\n        } else if (e.keyCode === keyCode.DOWN) {\r\n          drop();\r\n        } else if (e.keyCode === keyCode.UP) {\r\n          playerRotate(screen, 1);\r\n        }\r\n      }\r\n    },\r\n    [movePlayer, drop, playerRotate, screen, gameOver]\r\n  );\r\n\r\n  useInterval(() => {\r\n    drop();\r\n  }, dropTime);\r\n\r\n  return (\r\n    <StyledTetris role=\"button\" tabIndex=\"0\" onKeyDown={(e) => move(e)}>\r\n      {gameOver ? (\r\n        <MainScreen screen={screen} gameOver={gameOver} />\r\n      ) : (\r\n        <MainScreen screen={screen} />\r\n      )}\r\n      <aside>\r\n        <Display text={`Score: ${score}`} />\r\n        <Display text={`Rows: ${rows}`} />\r\n        <Display text={`Level: ${level}`} />\r\n\r\n        <StartButton onclick={startGame} children=\"Start Game\" />\r\n      </aside>\r\n    </StyledTetris>\r\n  );\r\n};\r\nexport default Tetris;\r\n\r\nexport const StyledTetris = styled.div`\r\n  display: flex;\r\n  align-items: flex-start;\r\n  padding: 40px;\r\n  margin: 0 auto;\r\n  max-width: 900px;\r\n  border: none;\r\n\r\n  :focus {\r\n    outline: 0;\r\n  }\r\n\r\n  aside {\r\n    width: 100%;\r\n    max-width: 200px;\r\n    display: block;\r\n    padding: 0 20px;\r\n  }\r\n`;\r\n","import { useState, useCallback } from \"react\";\r\n\r\nimport { checkCollision } from \"../game-helpers\";\r\nimport { MainScreen } from \"../constant\";\r\nimport { TETROMINOS, randomTetromino } from \"../tetrominos\";\r\n\r\nexport const usePlayer = () => {\r\n  const [player, setPlayer] = useState({\r\n    position: { x: 0, y: 0 },\r\n    tetromino: TETROMINOS[0].shape,\r\n    collided: false,\r\n  });\r\n\r\n  const rotate = (matrix, direction) => {\r\n    // Make the rows to become cols (transpose)\r\n    const rotatedTetro = matrix.map((_, index) =>\r\n      matrix.map((col) => col[index])\r\n    );\r\n    // Reverse each row to get a rotated matrix\r\n    if (direction > 0) return rotatedTetro.map((row) => row.reverse());\r\n    return rotatedTetro.reverse();\r\n  };\r\n\r\n  const playerRotate = (screen, direction) => {\r\n    const clonedPlayer = JSON.parse(JSON.stringify(player));\r\n    clonedPlayer.tetromino = rotate(clonedPlayer.tetromino, direction);\r\n\r\n    const position = clonedPlayer.position.x;\r\n    let offset = 1;\r\n    while (checkCollision(clonedPlayer, screen, { x: 0, y: 0 })) {\r\n      clonedPlayer.position.x += offset;\r\n      offset = -(offset + (offset > 0 ? 1 : -1));\r\n      if (offset > clonedPlayer.tetromino[0].length) {\r\n        rotate(clonedPlayer.tetromino, -direction);\r\n        clonedPlayer.position.x = position;\r\n        return;\r\n      }\r\n    }\r\n    setPlayer(clonedPlayer);\r\n  };\r\n\r\n  const updatePlayerPosition = ({ x, y, collided }) => {\r\n    setPlayer((prev) => ({\r\n      ...prev,\r\n      position: { x: (prev.position.x += x), y: (prev.position.y += y) },\r\n      collided,\r\n    }));\r\n  };\r\n\r\n  const resetPlayer = useCallback(() => {\r\n    setPlayer({\r\n      position: { x: MainScreen.WIDTH / 2 - 2, y: 0 },\r\n      tetromino: randomTetromino().shape,\r\n      collided: false,\r\n    });\r\n  }, []);\r\n\r\n  return [player, updatePlayerPosition, resetPlayer, playerRotate];\r\n};\r\n","import { useEffect, useRef } from \"react\";\r\n\r\nexport function useInterval(callback, delay) {\r\n  const ref = useRef();\r\n  // Remember the latest callback.\r\n  useEffect(() => {\r\n    ref.current = callback;\r\n  }, [callback]);\r\n\r\n  // Set up the interval.\r\n  useEffect(() => {\r\n    function tick() {\r\n      ref.current();\r\n    }\r\n    if (delay !== null) {\r\n      const id = setInterval(tick, delay);\r\n      return () => {\r\n        clearInterval(id);\r\n      };\r\n    }\r\n  }, [delay]);\r\n}\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nimport Tetris from \"./components/Tetris\";\r\n\r\nimport bgImage from \"./image/bg.png\";\r\n\r\nconst App = () => (\r\n  <StyledApp className=\"App\">\r\n    <Tetris />\r\n  </StyledApp>\r\n);\r\n\r\nexport default App;\r\n\r\nconst StyledApp = styled.div`\r\n  width: 100vw;\r\n  height: 100vh;\r\n  background: url(${bgImage}) #000;\r\n  background-size: cover;\r\n  overflow: hidden;\r\n`;\r\n","import { createGlobalStyle } from \"styled-components\";\r\nimport { normalize } from \"styled-normalize\";\r\nimport React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport App from \"./App\";\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n${normalize}\r\n  body {\r\n    margin: 0;\r\n    font-family: \"VT323\", Arial, Helvetica, sans-serif;\r\n  }\r\n\r\n`;\r\n\r\nReactDOM.render(\r\n  <React.Fragment>\r\n    <GlobalStyle />\r\n    <App />\r\n  </React.Fragment>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}