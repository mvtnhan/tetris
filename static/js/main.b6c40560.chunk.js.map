{"version":3,"sources":["game-helpers.js","tetrominos.js","hooks/useStage.js","components/Cell.js","components/Stage.js","components/Display.js","components/StartButton.js","components/Tetris.js","hooks/usePlayer.js","hooks/useGameStatus.js","hooks/useInterval.js","App.js","serviceWorker.js","index.js","image/bg.png"],"names":["createStage","Array","from","fill","checkCollision","player","stage","moveX","x","moveY","y","tetromino","length","pos","TETROMINOS","0","shape","color","I","J","L","O","S","T","Z","randomTetromino","randTetromino","Math","floor","random","useStage","resetPlayer","useState","setStage","rowsCleared","setRowsCleared","useEffect","updateStage","prevStage","newStage","map","row","cell","forEach","value","collided","reduce","ack","findIndex","prev","unshift","push","sweepRows","React","memo","type","StyledCell","console","log","styled","div","props","Stage","StyledStage","width","height","key","Display","gameOver","text","StyledDisplay","StartButton","callback","StyledStartButton","onClick","button","Tetris","dropTime","setDropTime","setGameOver","setPlayer","rotate","matrix","dir","rotatedTetro","_","index","col","reverse","useCallback","STAGE_WIDTH","clonedPlayer","JSON","parse","stringify","offset","usePlayer","updatePlayerPos","playerRotate","score","setScore","rows","setRows","level","setLevel","linePoints","calcScore","useGameStatus","movePlayer","drop","move","keyCode","delay","savedCallback","useRef","current","id","setInterval","clearInterval","useInterval","StyledTetrisWrapper","role","tabIndex","onKeyDown","e","onKeyUp","StyledTetris","bgImage","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message","module","exports"],"mappings":"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","file":"static/js/main.b6c40560.chunk.js","sourcesContent":["export const STAGE_WIDTH = 12;\r\nexport const STAGE_HEIGHT = 20;\r\n\r\nexport const createStage = () =>\r\n  Array.from(Array(STAGE_HEIGHT), () =>\r\n    new Array(STAGE_WIDTH).fill([0, \"clear\"])\r\n  );\r\n\r\nexport const checkCollision = (player, stage, { x: moveX, y: moveY }) => {\r\n  for (let y = 0; y < player.tetromino.length; y += 1) {\r\n    for (let x = 0; x < player.tetromino[y].length; x += 1) {\r\n      //1. Check that we're on an actual Tetromino cell\r\n      if (player.tetromino[y][x] !== 0) {\r\n        if (\r\n          //2. Check that our move is inside the game areas height (y)\r\n          //We should't go through the bottom of the play area\r\n          !stage[y + player.pos.y + moveY] ||\r\n          //3. Check that our move is inside the game areas width (x)\r\n          !stage[y + player.pos.y + moveY][x + player.pos.x + moveX] ||\r\n          //4. Check that the cell we're moving to isn't set to clear\r\n          stage[y + player.pos.y + moveY][x + player.pos.x + moveX][1] !==\r\n            \"clear\"\r\n        ) {\r\n          return true;\r\n        }\r\n      }\r\n    }\r\n  }\r\n};\r\n","export const TETROMINOS = {\r\n  0: { shape: [[0]], color: \"0,0,0\" },\r\n  I: {\r\n    shape: [\r\n      [0, \"I\", 0, 0],\r\n      [0, \"I\", 0, 0],\r\n      [0, \"I\", 0, 0],\r\n      [0, \"I\", 0, 0],\r\n    ],\r\n    color: \"80,227,230\",\r\n  },\r\n  J: {\r\n    shape: [\r\n      [0, \"J\", 0],\r\n      [0, \"J\", 0],\r\n      [\"J\", \"J\", 0],\r\n    ],\r\n    color: \"36,295,223\",\r\n  },\r\n  L: {\r\n    shape: [\r\n      [0, \"L\", 0],\r\n      [0, \"L\", 0],\r\n      [0, \"L\", \"L\"],\r\n    ],\r\n    color: \"223,172,36\",\r\n  },\r\n  O: {\r\n    shape: [\r\n      [\"O\", \"O\"],\r\n      [\"O\", \"O\"],\r\n    ],\r\n    color: \"223,217,36\",\r\n  },\r\n  S: {\r\n    shape: [\r\n      [0, \"S\", \"S\"],\r\n      [\"S\", \"S\", 0],\r\n      [0, 0, 0],\r\n    ],\r\n    color: \"48,211,56\",\r\n  },\r\n  T: {\r\n    shape: [\r\n      [\"T\", \"T\", \"T\"],\r\n      [0, \"T\", 0],\r\n      [0, 0, 0],\r\n    ],\r\n    color: \"132,61,198\",\r\n  },\r\n  Z: {\r\n    shape: [\r\n      [\"Z\", \"Z\", 0],\r\n      [0, \"Z\", \"Z\"],\r\n      [0, 0, 0],\r\n    ],\r\n    color: \"227,78,78\",\r\n  },\r\n};\r\n\r\nexport const randomTetromino = () => {\r\n  const tetrominos = \"IJLOSTZ\";\r\n  const randTetromino =\r\n    tetrominos[Math.floor(Math.random() * tetrominos.length)];\r\n  return TETROMINOS[randTetromino];\r\n};\r\n","import { useState, useEffect } from \"react\";\r\nimport { createStage } from \"../game-helpers\";\r\n\r\nexport const useStage = (player, resetPlayer) => {\r\n  const [stage, setStage] = useState(createStage());\r\n  const [rowsCleared, setRowsCleared] = useState(0);\r\n\r\n  useEffect(() => {\r\n    setRowsCleared(0);\r\n\r\n    const sweepRows = (newStage) =>\r\n      newStage.reduce((ack, row) => {\r\n        if (row.findIndex((cell) => cell[0] === 0) === -1) {\r\n          setRowsCleared((prev) => prev + 1);\r\n          ack.unshift(new Array(newStage[0].length).fill([0, \"clear\"]));\r\n          return ack;\r\n        }\r\n\r\n        ack.push(row);\r\n        return ack;\r\n      }, []);\r\n\r\n    const updateStage = (prevStage) => {\r\n      // First flush the stage\r\n      const newStage = prevStage.map(\r\n        (row) => row.map((cell) => (cell[1] === \"clear\" ? [0, \"clear\"] : cell)) //kiểm tra xem stage có được xóa hay ko\r\n      );\r\n\r\n      // Then draw the tetromino\r\n      // kiểm tra những cell nào trong tetromino đang chiếm giữ để biết đc hình dạng của tetromino\r\n      player.tetromino.forEach((row, y) => {\r\n        row.forEach((value, x) => {\r\n          //value là giá trị của 1 cell trong tetromino\r\n          if (value !== 0) {\r\n            // nếu value khác 0 thì nó đang ở trên 1 cell tạo nên hình dạng của tetromino (định vị được tetromino trên stage)\r\n            newStage[y + player.pos.y][x + player.pos.x] = [\r\n              //cho tọa độ trên stage nên đặt nó thành value\r\n              value,\r\n              `${player.collided ? \"merged\" : \"clear\"}`, // đó là tetromino mà ta lặp qua nên chúng ta lấy giá trị của tetromino  sau đó đánh dấu lại\r\n            ];\r\n          }\r\n        });\r\n      });\r\n      // Then check if we collided\r\n      if (player.collided) {\r\n        resetPlayer();\r\n        return sweepRows(newStage);\r\n      }\r\n\r\n      return newStage;\r\n    };\r\n\r\n    setStage((prev) => updateStage(prev));\r\n  }, [player, resetPlayer]);\r\n\r\n  return [stage, setStage, rowsCleared];\r\n};\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nimport { TETROMINOS } from \"../tetrominos\";\r\n\r\nconst Cell = ({ type }) => (\r\n  <StyledCell type={type} color={TETROMINOS[type].color}>\r\n    {console.log(\"re-render\")}\r\n  </StyledCell>\r\n);\r\nexport default React.memo(Cell);\r\n\r\nconst StyledCell = styled.div`\r\n  width: auto;\r\n  background: rgba(${(props) => props.color}, 0.8);\r\n  border: ${(props) => (props.type === 0 ? \"0px solid\" : \"4px solid\")};\r\n  border-bottom-color: rgba(${(props) => props.color}, 0.1);\r\n  border-right-color: rgba(${(props) => props.color}, 1);\r\n  border-top-color: rgba(${(props) => props.color}, 1);\r\n  border-left-color: rgba(${(props) => props.color}, 0.3);\r\n`;\r\n","import React from \"react\";\r\nimport Cell from \"./Cell\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Stage = ({ stage }) => (\r\n  <StyledStage width={stage[0].length} height={stage.length}>\r\n    {stage.map((row) => row.map((cell, x) => <Cell key={x} type={cell[0]} />))}\r\n  </StyledStage>\r\n);\r\nexport default Stage;\r\n\r\nconst StyledStage = styled.div`\r\n  display: grid;\r\n  grid-template-rows: repeat(\r\n    ${(props) => props.height},\r\n    calc(25vw / ${(props) => props.width})\r\n  );\r\n\r\n  grid-template-columns: repeat(${(props) => props.width}, 1fr);\r\n  grid-gap: 1px;\r\n  border: 2px solid #333;\r\n  width: 100%;\r\n  max-width: 25vw;\r\n  background: #111;\r\n`;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Display = ({ gameOver, text }) => (\r\n  <StyledDisplay gameOver={gameOver}>{text}</StyledDisplay>\r\n);\r\nexport default Display;\r\n\r\nconst StyledDisplay = styled.div`\r\n  box-sizing: border-box;\r\n  display: flex;\r\n  align-items: center;\r\n  margin: 0 0 20px 0;\r\n  padding: 20px;\r\n  border: 4px solid #333;\r\n  min-height: 30px;\r\n  width: 100%;\r\n  border-radius: 20px;\r\n  color: ${(props) => (props.gameOver ? \"red\" : \"#999\")};\r\n  background: #000;\r\n  font-family: Pixel, Arial, Helvetica, sans-serif;\r\n  font-size: 0.8rem;\r\n`;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst StartButton = ({ callback }) => (\r\n  <StyledStartButton onClick={callback}>Start Game</StyledStartButton>\r\n);\r\nexport default StartButton;\r\n\r\nconst StyledStartButton = styled.button`\r\n  box-sizing: border-box;\r\n  margin: 0 0 20px 0;\r\n  padding: 20px;\r\n  min-height: 30px;\r\n  width: 100%;\r\n  border-radius: 20px;\r\n  border: none;\r\n  color: white;\r\n  background: #333;\r\n  font-family: Pixel, Arial, Helvetica, sans-serif;\r\n  font-size: 1rem;\r\n  outline: none;\r\n  cursor: pointer;\r\n`;\r\n","import React, { useState } from \"react\";\r\n\r\nimport { createStage, checkCollision } from \"../game-helpers\";\r\n\r\nimport styled from \"styled-components\";\r\n\r\nimport bgImage from \"../image/bg.png\";\r\n\r\n// Custom Hooks\r\nimport { useInterval } from \"../hooks/useInterval\";\r\nimport { usePlayer } from \"../hooks/usePlayer\";\r\nimport { useStage } from \"../hooks/useStage\";\r\nimport { useGameStatus } from \"../hooks/useGameStatus\";\r\n\r\n// Components\r\nimport Stage from \"./Stage\";\r\nimport Display from \"./Display\";\r\nimport StartButton from \"./StartButton\";\r\n\r\nconst Tetris = () => {\r\n  const [dropTime, setDropTime] = useState(null);\r\n  const [gameOver, setGameOver] = useState(false);\r\n\r\n  const [player, updatePlayerPos, resetPlayer, playerRotate] = usePlayer();\r\n  const [stage, setStage, rowsCleared] = useStage(player, resetPlayer);\r\n  const [score, setScore, rows, setRows, level, setLevel] = useGameStatus(\r\n    rowsCleared\r\n  );\r\n\r\n  console.log(\"re-render\");\r\n\r\n  const movePlayer = (dir) => {\r\n    if (!checkCollision(player, stage, { x: dir, y: 0 })) {\r\n      updatePlayerPos({ x: dir, y: 0 });\r\n    }\r\n  };\r\n\r\n  const keyUp = ({ keyCode }) => {\r\n    if (!gameOver) {\r\n      if (keyCode === 40) {\r\n        console.log(\"interval on\");\r\n        setDropTime(1000 / (level + 1));\r\n      }\r\n    }\r\n  };\r\n\r\n  const startGame = () => {\r\n    console.log(\"test\");\r\n    // Reset everything\r\n    setStage(createStage());\r\n    setDropTime(1000);\r\n    resetPlayer();\r\n    setGameOver(false);\r\n    setScore(0);\r\n    setRows(10);\r\n    setLevel(0);\r\n  };\r\n\r\n  const drop = () => {\r\n    //Increase level when player has cleared 10 rows\r\n    if (rows > (level + 1) * 10) {\r\n      setLevel((prev) => prev + 1);\r\n      console.log(level);\r\n      //also increase speed\r\n      setDropTime(1000 / (level + 1) + 30);\r\n    }\r\n\r\n    if (!checkCollision(player, stage, { x: 0, y: 1 })) {\r\n      updatePlayerPos({ x: 0, y: 1, collided: false });\r\n    } else {\r\n      // Game Over\r\n      if (player.pos.y < 1) {\r\n        console.log(\"GAME OVER!!!\");\r\n        setGameOver(true);\r\n        setDropTime(null);\r\n      }\r\n      updatePlayerPos({ x: 0, y: 0, collided: true });\r\n    }\r\n  };\r\n\r\n  const dropPlayer = () => {\r\n    console.log(\"interval off\");\r\n    setDropTime(null);\r\n    drop();\r\n  };\r\n\r\n  const move = ({ keyCode }) => {\r\n    console.log(keyCode);\r\n    if (!gameOver) {\r\n      if (keyCode === 37) {\r\n        movePlayer(-1);\r\n      } else if (keyCode === 39) {\r\n        movePlayer(1);\r\n      } else if (keyCode === 40) {\r\n        dropPlayer();\r\n      } else if (keyCode === 38) {\r\n        playerRotate(stage, 1);\r\n      }\r\n    }\r\n  };\r\n\r\n  useInterval(() => {\r\n    drop();\r\n  }, dropTime);\r\n\r\n  return (\r\n    <StyledTetrisWrapper\r\n      role=\"button\"\r\n      tabIndex=\"0\"\r\n      onKeyDown={(e) => move(e)}\r\n      onKeyUp={keyUp}\r\n    >\r\n      <StyledTetris>\r\n        <Stage stage={stage} />\r\n        <aside>\r\n          {gameOver ? (\r\n            <Display gameOver={gameOver} text=\"Game Over\" />\r\n          ) : (\r\n            <div>\r\n              <Display text={`Score: ${score}`} />\r\n              <Display text={`Rows: ${rows}`} />\r\n              <Display text={`Level: ${level}`} />\r\n            </div>\r\n          )}\r\n          <StartButton callback={startGame} />\r\n        </aside>\r\n      </StyledTetris>\r\n    </StyledTetrisWrapper>\r\n  );\r\n};\r\nexport default Tetris;\r\n\r\nconst StyledTetrisWrapper = styled.div`\r\n  width: 100vw;\r\n  height: 100vh;\r\n  background: url(${bgImage}) #000;\r\n  background-size: cover;\r\n  overflow: hidden;\r\n`;\r\n\r\nexport const StyledTetris = styled.div`\r\n  display: flex;\r\n  align-items: flex-start;\r\n  padding: 40px;\r\n  margin: 0 auto;\r\n  max-width: 900px;\r\n\r\n  aside {\r\n    width: 100%;\r\n    max-width: 200px;\r\n    display: block;\r\n    padding: 0 20px;\r\n  }\r\n`;\r\n","import { useState, useCallback } from \"react\";\r\n\r\nimport { TETROMINOS, randomTetromino } from \"../tetrominos\";\r\nimport { STAGE_WIDTH, checkCollision } from \"../game-helpers\";\r\n\r\nexport const usePlayer = () => {\r\n  const [player, setPlayer] = useState({\r\n    pos: { x: 0, y: 0 }, // vị trí\r\n    tetromino: TETROMINOS[0].shape,\r\n    collided: false, //kiểm tra có va chạm ko\r\n  });\r\n\r\n  const rotate = (matrix, dir) => {\r\n    // Make the rows to become cols (transpose)\r\n    const rotatedTetro = matrix.map((_, index) =>\r\n      matrix.map((col) => col[index])\r\n    );\r\n    // Reverse each row to get a rotated matrix\r\n    if (dir > 0) return rotatedTetro.map((row) => row.reverse());\r\n    return rotatedTetro.reverse();\r\n  };\r\n\r\n  const playerRotate = (stage, dir) => {\r\n    const clonedPlayer = JSON.parse(JSON.stringify(player));\r\n    clonedPlayer.tetromino = rotate(clonedPlayer.tetromino, dir);\r\n\r\n    const pos = clonedPlayer.pos.x;\r\n    let offset = 1;\r\n    while (checkCollision(clonedPlayer, stage, { x: 0, y: 0 })) {\r\n      clonedPlayer.pos.x += offset;\r\n      offset = -(offset + (offset > 0 ? 1 : -1));\r\n      if (offset > clonedPlayer.tetromino[0].length) {\r\n        rotate(clonedPlayer.tetromino, -dir);\r\n        clonedPlayer.pos.x = pos;\r\n        return;\r\n      }\r\n    }\r\n    setPlayer(clonedPlayer);\r\n  };\r\n\r\n  const updatePlayerPos = ({ x, y, collided }) => {\r\n    setPlayer((prev) => ({\r\n      ...prev,\r\n      pos: { x: (prev.pos.x += x), y: (prev.pos.y += y) },\r\n      collided,\r\n    }));\r\n  };\r\n\r\n  const resetPlayer = useCallback(() => {\r\n    setPlayer({\r\n      pos: { x: STAGE_WIDTH / 2 - 2, y: 0 },\r\n      tetromino: randomTetromino().shape,\r\n      collided: false,\r\n    });\r\n  }, []);\r\n\r\n  return [player, updatePlayerPos, resetPlayer, playerRotate];\r\n};\r\n","import { useState, useEffect, useCallback } from \"react\";\r\n\r\nexport const useGameStatus = (rowsCleared) => {\r\n  const [score, setScore] = useState(0);\r\n  const [rows, setRows] = useState(0);\r\n  const [level, setLevel] = useState(0);\r\n\r\n  const linePoints = [40, 100, 300, 1200];\r\n\r\n  const calcScore = useCallback(() => {\r\n    //we have score\r\n    if (rowsCleared > 0) {\r\n      //this is how original Tetris score is calculated\r\n      setScore((prev) => prev + linePoints[rowsCleared - 1] * (level + 1));\r\n      setRows((prev) => prev + rowsCleared);\r\n    }\r\n  }, [level, linePoints, rowsCleared]);\r\n\r\n  useEffect(() => {\r\n    calcScore();\r\n  }, [calcScore, rowsCleared, score]);\r\n\r\n  return [score, setScore, rows, setRows, level, setLevel];\r\n};\r\n","import { useEffect, useRef } from 'react';\n\nexport function useInterval(callback, delay) {\n  const savedCallback = useRef();\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      const id = setInterval(tick, delay);\n      return () => {\n        clearInterval(id);\n      };\n    }\n  }, [delay]);\n}\n","import React from \"react\";\nimport Tetris from \"./components/Tetris\";\n\nconst App = () => (\n  <div className=\"App\">\n    <Tetris />\n  </div>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/bg.2810fe6b.png\";"],"sourceRoot":""}